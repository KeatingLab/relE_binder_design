// from https://json.nlohmann.me/api/basic_json/parse/#examples
#include <iostream>
#include <iomanip>
#include "nlohmann/json.hpp"

using json = nlohmann::json;

int main()
{
    // a JSON text
    auto text = R"(
    {
        "Image": {
            "Width":  800,
            "Height": 600,
            "Title":  "View from 15th Floor",
            "Thumbnail": {
                "Url":    "http://www.example.com/image/481989943",
                "Height": 125,
                "Width":  100
            },
            "Animated" : false,
            "IDs": [116, 943, 234, 38793]
        }
    }
    )";

    // parse and serialize JSON
    json j_complete = json::parse(text);
    std::cout << std::setw(4) << j_complete << "\n\n";


    // define parser callback
    json::parser_callback_t cb = [](int depth, json::parse_event_t event, json & parsed)
    {
        // skip object elements with key "Thumbnail"
        if (event == json::parse_event_t::key and parsed == json("Thumbnail"))
        {
            return false;
        }
        else
        {
            return true;
        }
    };

    // parse (with callback) and serialize JSON
    json j_filtered = json::parse(text, cb);
    std::cout << std::setw(4) << j_filtered << '\n';

    // now read real string
    text = R"(
        {"contType": "SS", "AA3": "ALA", "var1": "normalizedCbdistance", "var2": "CaDistance", "var1Range": [0, 1], "var2Range": [0, 15], "dataArray": [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 34.0, 4419.0, 9849.0, 9192.0, 6305.0, 3483.0, 3212.0, 1861.0, 719.0, 313.0, 194.0, 110.0, 28.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 794.0, 15436.0, 20168.0, 15892.0, 14472.0, 9560.0, 6119.0, 3822.0, 2698.0, 1285.0, 701.0, 407.0, 131.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 99.0, 10774.0, 30569.0, 23892.0, 21612.0, 18349.0, 11942.0, 6076.0, 4000.0, 3443.0, 2005.0, 1197.0, 607.0, 136.0, 23.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 8.0, 2029.0, 29541.0, 36098.0, 25148.0, 23477.0, 16001.0, 9329.0, 5201.0, 4235.0, 3394.0, 1690.0, 970.0, 402.0, 49.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 212.0, 13328.0, 35464.0, 27635.0, 28400.0, 19730.0, 11798.0, 6701.0, 4623.0, 4766.0, 3145.0, 1384.0, 693.0, 206.0, 17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 3017.0, 28689.0, 29275.0, 24761.0, 27926.0, 14805.0, 8989.0, 5396.0, 4373.0, 3628.0, 1951.0, 995.0, 386.0, 60.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 201.0, 11723.0, 33206.0, 19848.0, 22933.0, 21566.0, 10145.0, 5997.0, 4262.0, 3129.0, 2004.0, 1118.0, 543.0, 136.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 2101.0, 21843.0, 30738.0, 18537.0, 16377.0, 10467.0, 5620.0, 3490.0, 3262.0, 2095.0, 997.0, 601.0, 229.0, 22.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 386.0, 8128.0, 20913.0, 17672.0, 12835.0, 7572.0, 4660.0, 3201.0, 2403.0, 1787.0, 1304.0, 674.0, 329.0, 39.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 896.0, 10397.0, 17321.0, 12564.0, 6000.0, 3233.0, 2198.0, 1497.0, 987.0, 930.0, 542.0, 310.0, 78.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 1232.0, 10429.0, 11879.0, 7285.0, 2801.0, 1400.0, 748.0, 581.0, 425.0, 357.0, 256.0, 68.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 1165.0, 9014.0, 5636.0, 2943.0, 1184.0, 655.0, 248.0, 187.0, 161.0, 89.0, 63.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 470.0, 5098.0, 4419.0, 1198.0, 470.0, 173.0, 53.0, 47.0, 46.0, 17.0, 10.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 3.0, 109.0, 1800.0, 3288.0, 576.0, 119.0, 49.0, 26.0, 6.0, 6.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 27.0, 776.0, 873.0, 116.0, 25.0, 16.0, 7.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 6.0, 140.0, 184.0, 30.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 4.0, 62.0, 5.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], "var1BinSize": 0.05, "var2BinSize": 0.5}
    )";

    // parse and serialize JSON
    j_complete = json::parse(text);
    std::cout << std::setw(4) << j_complete << "\n\n";

}